#!/usr/bin/php
<?php
if ((boolean)ini_get('phar.readonly')) {
    die("Failed!\n\nThe 'phar.readonly' property on php.ini must be set to 'Off'");
}

// Require composer autoload
require 'vendor/autoload.php';

// Initialize the IoC Container and main components
require 'app/bootstrap.php';

$php = $app->make('php');

// Unlink previous created project.phar
if ($php->file_exists(__DIR__."/dployer.phar")) {
    $php->unlink(__DIR__."/dployer.phar");
}

if ($php->file_exists(__DIR__."/dployer")) {
    $php->unlink(__DIR__."/dployer");
}

// Recursive glob
function glob_recursive($pattern, $flags = 0)
{
    $files = glob($pattern, $flags);
    foreach (glob(dirname($pattern).'/*', GLOB_ONLYDIR|GLOB_NOSORT) as $dir)
    {
        $files = array_merge($files, glob_recursive($dir.'/'.basename($pattern), $flags));
    }
    return $files;
}

// Build dployer.phar
echo "Building dployer.phar...\n";
$phar = new Phar("dployer.phar");
$phar->setStub("#!/usr/bin/env php\n".$phar->createDefaultStub('main.php'));
foreach(glob_recursive('*.{php,pem,json,xml}',GLOB_BRACE) as $file) {
    if (substr($file, 0, 2) == './') {
        $file = substr($file, 2);
    }
    $phar->addFile($file);
}
exec("chmod +x dployer.phar");
exec("mv dployer.phar dployer");
echo "Done\n";
